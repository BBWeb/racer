{clone: specClone, create, createObject, createArray} = require '../specHelper'

MemorySync = module.exports = ->
  @_data = world: {}  # maps path -> val
  @version = 0
  return

MemorySync:: =

  setVersion: (ver) ->
    @version = Math.max @version, ver

  get: (path, data, getRef) ->
    data ||= @_data
    # Note that $deref is set to null instead of being deleted; deleting a
    # value in a speculative model would not override the underlying value
    data.$deref = null
    if path then lookup(path, data, getRef) else data.world

  set: (path, value, ver, data) ->
    @setVersion ver
    {1: parent, 2: prop} = lookupSet path, data || @_data, `ver == null`, 'object'
    return parent[prop] = value

  del: (path, ver, data) ->
    @setVersion ver
    data ||= @_data
    speculative = `ver == null`
    [obj, parent, prop] = lookupSet path, data, speculative
    if ver?
      delete parent[prop]
      return obj
    # If speculatiave, replace the parent object with a clone that
    # has the desired item deleted
    return obj unless parent
    if ~(index = path.lastIndexOf '.')
      parentPath = path.substr 0, index
      [parent, grandparent, parentProp] =
        lookupSet parentPath, data, speculative
    else
      parent = data.world
      grandparent = data
      parentProp = 'world'
    parentClone = specClone parent
    delete parentClone[prop]
    grandparent[parentProp] = parentClone
    return obj

  #for PUSH UNSHIFT SPLICE POP SHIFT INSERT_AFTER INSERT_BEFORE REMOVE MOVE
  
  #if PUSH
  push: (path, args..., ver, data) ->
  #elseif UNSHIFT
  unshift: (path, args..., ver, data) ->
  #elseif SPLICE
  splice: (path, args..., ver, data) ->
  #elseif POP
  pop: (path, ver, data) ->
  #elseif SHIFT
  shift: (path, ver, data) ->
  #elseif INSERT_AFTER
  insertAfter: (path, afterIndex, value, ver, data) ->
  #elseif INSERT_BEFORE
  insertBefore: (path, beforeIndex, value, ver, data) ->
  #elseif REMOVE
  remove: (path, startIndex, howMany, ver, data) ->
  #elseif MOVE
  move: (path, from, to, ver, data) ->
  #end
    @setVersion ver
    [arr] = lookupSet path, data || @_data, `ver == null`, 'array'
    throw new Error 'Not an Array' unless Array.isArray arr
    #if PUSH
    return arr.push args...
    #elseif UNSHIFT
    return arr.unshift args...
    #elseif SPLICE
    return arr.splice args...
    #elseif POP
    return arr.pop()
    #elseif SHIFT
    return arr.shift()
    #else
    #if INSERT_AFTER
    outOfBounds = !(-1 <= afterIndex <= arr.length - 1)
    #elseif INSERT_BEFORE
    outOfBounds = !(0 <= beforeIndex <= arr.length)
    #elseif REMOVE
    outOfBounds = !(0 <= startIndex <= (arr.length && arr.length - 1 || 0))
    #elseif MOVE
    len = arr.length
    from += len if from < 0
    to += len if to < 0
    outOfBounds = !((0 <= from < len) && (0 <= to < len))
    #end
    throw new Error 'Out of Bounds' if outOfBounds
    #if INSERT_AFTER
    arr.splice afterIndex + 1, 0, value
    return arr.length
    #elseif INSERT_BEFORE
    arr.splice beforeIndex, 0, value
    return arr.length
    #elseif REMOVE
    return arr.splice startIndex, howMany
    #elseif MOVE
    [value] = arr.splice from, 1  # Remove from old location
    arr.splice to, 0, value  # Insert in new location
    return value
    #end
    #end
  #end


#for LOOKUP SET

#if LOOKUP
# Returns value
# Used by getters
# Does not dereference the final item if getRef is truthy
lookup = (path, data, getRef) ->
#end
#if SET
# Returns [value, parent, prop]
# Used by mutators
lookupSet = (path, data, speculative, pathType) ->
#end
  props = path.split '.'
  len = props.length
  i = 0
  #if SET
  curr = data.world = if speculative then create data.world else data.world
  #else
  curr = data.world
  path = ''
  #end

  while i < len
    prop = props[i++]
    #if SET
    parent = curr
    #end
    curr = curr[prop]

    #if SET
    # Create empty objects implied by the path
    if curr?
      curr = parent[prop] = create curr  if speculative && typeof curr is 'object'
    else
      break unless pathType
      # If pathType is truthy, create empty parent objects implied by path
      curr = parent[prop] = if speculative
          if pathType is 'array' && i == len then createArray() else createObject()
        else
          if pathType is 'array' && i == len then [] else {}
    #else
    # The absolute path traversed so far
    path = if path then path + '.' + prop else prop

    if typeof curr is 'function'
      break if getRef && i == len

      [curr, path, i] = refOut = curr lookup, data, path, props, len, i
    
    break unless curr?
    #end

  #if SET
  return [curr, parent, prop]
  #else
  return curr
  #end
#end