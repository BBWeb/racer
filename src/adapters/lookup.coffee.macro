#if LOOKUP
# Returns value
# Used generally
lookup = (path, data) ->
#end

#if WITH_VERSION
# Returns [value, {ver}]
lookupWithVersion = (path, data, vers) ->
#end

#if REF
# Returns value
# Used by reference indexer
# Does not dereference the final item
lookupRef = (path, data) ->
#end

#if ADD_PATH
# Returns value
# Used by reference indexer
lookupAddPath = (path, data, speculative, pathType) ->
#end

#if SET_VERSION
# Returns [value, {ver}, parent, prop]
# Used by setters & delete
lookupSetVersion = (path, data, vers, setVer, pathType) ->
  speculative = !setVer
#end

  curr = data
  #if WITH_VERSION or SET_VERSION
  currVer = vers
  #end
  #if SET_VERSION
  currVer.ver = setVer  if setVer
  #end
  props = path.split '.'
  path = ''
  data.$remainder = ''
  i = 0
  len = props.length

  while i < len
    prop = props[i++]
    #if ADD_PATH or SET_VERSION
    parent = curr
    #end
    curr = curr[prop]

    #if WITH_VERSION
    currVer = currVer[prop] || currVer
    #end

    #if SET_VERSION
    parentVer = currVer
    unless currVer = currVer[prop]
      currVer = if setVer && pathType
          parentVer[prop] = {}
        else currVer = parentVer
    #end

    # The absolute path traversed so far
    path = if path then path + '.' + prop else prop

    #if ADD_PATH or SET_VERSION
    # Create empty objects implied by the path
    if curr?
      curr = parent[prop] = create curr  if speculative && typeof curr is 'object'
    else
      unless pathType
        data.$remainder = props.slice(i).join '.'
        break

      # If pathType is truthy, create empty parent objects implied by path
      curr = parent[prop] = if speculative
          if pathType is 'array' && i == len then createArray() else createObject()
        else
          if pathType is 'array' && i == len then [] else {}

    #else
    break unless curr?
    #end

    if curr.$r
      #if REF
      break if i == len
      #end

      #if WITH_VERSION or SET_VERSION
      [refObj, currVer] = lookupWithVersion curr.$r, data, vers
      currVer.ver = setVer if setVer
      #else
      refObj = lookup curr.$r, data
      #end
      dereffedPath = if data.$remainder then "#{data.$path}.#{data.$remainder}" else data.$path

      if key = curr.$k
        if Array.isArray keyObj = lookup key, data
          if i < len
            prop = keyObj[props[i++]]
            dereffedPath += '.' + prop
            #if WITH_VERSION
            [curr, currVer] = lookupWithVersion dereffedPath, data
            #else
            curr = lookup dereffedPath, data
            #end
          else
            curr = (lookup dereffedPath + '.' + prop for prop in keyVal)
        else
          dereffedPath += '.' + keyObj
          curr = lookup dereffedPath, data
          path = dereffedPath unless i == len
      else
        curr = refObj
        path = dereffedPath unless i == len
        #if SET_VERSION
        currVer.ver = setVer  if setVer
        #end
    
      break unless curr?

    else
      currVer.ver = setVer  if setVer

  data.$path = path
  #if SET_VERSION
  return [curr, currVer, parent, prop]
  #elseif WITH_VERSION
  return [curr, currVer]
  #else
  return curr
  #end
